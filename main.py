# -*- coding: utf-8 -*-
# ===================================================================================
# BOT DE SINAIS VIP/FREE - VERS√ÉO ESTRAT√âGICA PROFISSIONAL
# PARTE 1: CONFIGURA√á√ïES, IMPORTS E FUNCIONALIDADES B√ÅSICAS
# ===================================================================================

import logging
import os
import random
import asyncio
import json
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler, JobQueue
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from dotenv import load_dotenv

# ==========================================
# CARREGANDO VARI√ÅVEIS DE AMBIENTE
# ==========================================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CANAL_ID = int(os.getenv("CANAL_ID"))         # Canal Free
VIP_CANAL_ID = int(os.getenv("VIP_CANAL_ID")) # Canal VIP
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# ==========================================
# CONFIGURA√á√ÉO DE LOGS
# ==========================================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==========================================
# ESTRUTURAS DE DADOS E VARI√ÅVEIS GLOBAIS
# ==========================================
usuarios_vip = set()        # Guarda IDs VIP
usuarios_free = set()       # Guarda IDs Free
usuarios_dados = {}         # Dados completos dos usu√°rios
estatisticas_bot = {
    "sinais_enviados": 0,
    "conversoes_vip": 0,
    "usuarios_ativos": 0,
    "taxa_conversao": 0.0
}

# ==========================================
# SISTEMA DE GEST√ÉO DE BANCA E GALES
# ==========================================
class GestorBanca:
    def __init__(self, banca_inicial=100.0):
        self.banca_inicial = banca_inicial
        self.banca_atual = banca_inicial
        self.historico_operacoes = []
        self.sequencia_gales = [4, 8, 16]  # Percentuais para gales
        
    def calcular_entrada(self, percentual=2.0):
        """Calcula valor da entrada baseado no percentual da banca"""
        return self.banca_atual * (percentual / 100)
    
    def executar_gale(self, nivel_gale=0):
        """Executa estrat√©gia de gale com percentuais crescentes"""
        if nivel_gale >= len(self.sequencia_gales):
            return None
        percentual = self.sequencia_gales[nivel_gale]
        return self.calcular_entrada(percentual)
    
    def aplicar_juros_compostos(self, dias=30, taxa_diaria=0.02):
        """Simula crescimento com juros compostos"""
        valor_final = self.banca_inicial * ((1 + taxa_diaria) ** dias)
        return valor_final
    
    def registrar_operacao(self, tipo, valor, resultado):
        """Registra opera√ß√£o no hist√≥rico"""
        operacao = {
            "timestamp": datetime.now(),
            "tipo": tipo,
            "valor": valor,
            "resultado": resultado,
            "banca_pos": self.banca_atual
        }
        self.historico_operacoes.append(operacao)

# ==========================================
# MENSAGENS ESTRAT√âGICAS PARA CONVERS√ÉO
# ==========================================
mensagens_free_limitadas = [
    "üéØ SINAL FREE LIMITADO\nüí∞ Entrada: 2% da banca\n‚ö° V√°lido por 5 minutos\n\nüî• QUER SINAIS ILIMITADOS? Entre no VIP e ganhe 90 DIAS GR√ÅTIS!",
    "üìä AN√ÅLISE IA DETECTOU OPORTUNIDADE\nüíé Confian√ßa: 87%\n‚è∞ Janela: 3 minutos\n\nüöÄ No VIP voc√™ tem sinais 24/7 + b√¥nus de R$600!",
    "üé≤ PADR√ÉO IDENTIFICADO\nüí∏ Potencial: Alto\nüéØ Precis√£o: 91%\n\n‚≠ê Upgrade para VIP e receba material trader avan√ßado!"
]

mensagens_vip_exclusivas = [
    "üëë SINAL VIP EXCLUSIVO\nüí∞ Gest√£o de banca otimizada\nüìà Juros compostos ativos\nüéØ Entrada calculada: {valor}%\n\nüèÜ Torneio VIP: Maldivas + Rolex + Lamborghini",
    "üî• OPORTUNIDADE PREMIUM\nüíé An√°lise IA avan√ßada\nüìä Probabilidade: 94%\nüí∞ Gale autom√°tico configurado\n\nüéÅ B√¥nus ativo: Viagem Dubai para 2 pessoas",
    "‚ö° SINAL FLASH VIP\nüéØ Entrada: {valor} (otimizada)\nüìà Proje√ß√£o: +{ganho}% em 24h\nüèÖ Ranking: Top 1%\n\nüéä Pr√≥ximo sorteio: MacBook Pro 16\""
]

ofertas_promocionais = {
    "oferta_especial": {
        "titulo": "üî• OFERTA ESPECIAL",
        "descricao": "Fa√ßa seu primeiro dep√≥sito e ganhe acesso VIP GRATUITO!",
        "prazo": "Envie o print em at√© 12 horas!",
        "beneficios": [
            "üöÄ Grupo VIP Pago Gratuito",
            "ü§ñ Sinais com an√°lise de IA em tempo real", 
            "üìÖ Sinais organizados por hor√°rios",
            "üß† Mentalidade e gest√£o de banca",
            "üéÅ Sorteios exclusivos",
            "üìö Material trader avan√ßado",
            "üí∞ B√¥nus de at√© R$600",
            "‚ö° Sinais ilimitados em todos os jogos"
        ]
    },
    "torneio_vip": {
        "titulo": "üèÜ Torneio VIP Exclusivo",
        "premios": [
            "‚úàÔ∏è Mala de dinheiro + viagem a Dubai para duas pessoas",
            "üöó Lamborghini Urus",
            "‚åö Rolex Datejust 41", 
            "üé´ Ingressos para o BKFC Dubai",
            "üíª MacBook Pro 16\"",
            "üì± iPhone 16 Pro Max"
        ],
        "call_to_action": "üî• Gostaria de ganhar o mesmo?\nToque no bot√£o abaixo e entre para o clube privado\nO jogo pelos pr√™mios mais desejados come√ßa aqui üèÜ"
    },
    "codigo_promocional": {
        "codigo": "GESTAO",
        "beneficios": [
            "üéÅ B√¥nus Extra",
            "‚≠ê Vantagens VIP", 
            "üì± F√°cil de Usar"
        ],
        "instrucoes": "Cole o c√≥digo durante o cadastro para ativar os benef√≠cios"
    }
}

# ==========================================
# FUN√á√ïES DE UTILIDADE E FORMATA√á√ÉO
# ==========================================
def formatar_valor_brasileiro(valor):
    """Formata valores em reais brasileiro"""
    return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def gerar_emoji_aleatorio():
    """Gera emoji aleat√≥rio para dar dinamismo"""
    emojis = ["üöÄ", "üíé", "üî•", "‚ö°", "üéØ", "üí∞", "üèÜ", "‚≠ê", "üéä", "üí∏"]
    return random.choice(emojis)

def calcular_taxa_conversao():
    """Calcula taxa de convers√£o atual"""
    if len(usuarios_free) == 0:
        return 0.0
    return (len(usuarios_vip) / (len(usuarios_free) + len(usuarios_vip))) * 100

# ==========================================
# SISTEMA DE USU√ÅRIOS E DADOS
# ==========================================
def inicializar_usuario(user_id, username=None):
    """Inicializa dados do usu√°rio"""
    if user_id not in usuarios_dados:
        usuarios_dados[user_id] = {
            "id": user_id,
            "username": username,
            "data_entrada": datetime.now(),
            "tipo": "free",
            "sinais_recebidos": 0,
            "interacoes": 0,
            "ultima_atividade": datetime.now(),
            "gestor_banca": GestorBanca(),
            "vip_expira": None
        }

def promover_para_vip(user_id, dias_vip=90):
    """Promove usu√°rio para VIP com per√≠odo definido"""
    if user_id in usuarios_dados:
        usuarios_dados[user_id]["tipo"] = "vip"
        usuarios_dados[user_id]["vip_expira"] = datetime.now() + timedelta(days=dias_vip)
        usuarios_vip.add(user_id)
        usuarios_free.discard(user_id)
        return True
    return False

def verificar_vip_expirado(user_id):
    """Verifica se VIP do usu√°rio expirou"""
    if user_id in usuarios_dados and usuarios_dados[user_id]["vip_expira"]:
        if datetime.now() > usuarios_dados[user_id]["vip_expira"]:
            usuarios_dados[user_id]["tipo"] = "free"
            usuarios_dados[user_id]["vip_expira"] = None
            usuarios_vip.discard(user_id)
            usuarios_free.add(user_id)
            return True
    return False
# -*- coding: utf-8 -*-
# ===================================================================================
# BOT DE SINAIS VIP/FREE - VERS√ÉO ESTRAT√âGICA PROFISSIONAL  
# PARTE 2: HANDLERS, AUTOMA√á√ÉO E EXECU√á√ÉO PRINCIPAL
# ===================================================================================

# ==========================================
# FUN√á√ïES DE ENVIO DE MENSAGENS ESTRAT√âGICAS
# ==========================================
async def enviar_sinal_free_limitado(context: ContextTypes.DEFAULT_TYPE):
    """Envia sinal free limitado com call-to-action forte para VIP"""
    bot = context.bot
    mensagem = random.choice(mensagens_free_limitadas)
    
    keyboard = [
        [InlineKeyboardButton("üîì ENTRAR NO VIP AGORA", url="https://win-agegate-promo-68.lovable.app/")],
        [InlineKeyboardButton("üéÅ USAR CUPOM GESTAO", callback_data="cupom_gestao")],
        [InlineKeyboardButton("üèÜ VER TORNEIO VIP", callback_data="torneio_vip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await bot.send_message(
            chat_id=CANAL_ID, 
            text=mensagem,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        estatisticas_bot["sinais_enviados"] += 1
        logger.info("Sinal FREE limitado enviado com sucesso")
    except Exception as e:
        logger.error(f"Erro ao enviar sinal free: {e}")

async def enviar_sinal_vip_exclusivo(context: ContextTypes.DEFAULT_TYPE):
    """Envia sinal VIP com gest√£o de banca e ofertas exclusivas"""
    bot = context.bot
    
    # Simula c√°lculo de gest√£o de banca
    gestor = GestorBanca(1000.0)  # Banca exemplo
    valor_entrada = gestor.calcular_entrada(2.5)
    ganho_projetado = random.randint(15, 35)
    
    mensagem_base = random.choice(mensagens_vip_exclusivas)
    mensagem = mensagem_base.format(
        valor=f"{valor_entrada:.2f}",
        ganho=ganho_projetado
    )
    
    # Adiciona informa√ß√µes de gest√£o de banca
    info_banca = f"\n\nüìä GEST√ÉO DE BANCA ATIVA:\n"
    info_banca += f"üí∞ Entrada otimizada: {formatar_valor_brasileiro(valor_entrada)}\n"
    info_banca += f"üìà Proje√ß√£o 30 dias: {formatar_valor_brasileiro(gestor.aplicar_juros_compostos())}\n"
    info_banca += f"‚ö° Gales: 4% ‚Üí 8% ‚Üí 16% (autom√°tico)\n"
    
    mensagem_completa = mensagem + info_banca
    
    keyboard = [
        [InlineKeyboardButton("üéØ COPIAR SINAL", callback_data="copiar_sinal")],
        [InlineKeyboardButton("üìä GEST√ÉO DE BANCA", callback_data="gestao_banca")],
        [InlineKeyboardButton("üèÜ RANKING VIP", callback_data="ranking_vip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await bot.send_message(
            chat_id=VIP_CANAL_ID,
            text=mensagem_completa,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        logger.info("Sinal VIP exclusivo enviado com sucesso")
    except Exception as e:
        logger.error(f"Erro ao enviar sinal VIP: {e}")

async def enviar_oferta_urgente(bot, user_id: int):
    """Envia oferta urgente personalizada para convers√£o"""
    oferta = ofertas_promocionais["oferta_especial"]
    
    mensagem = f"üî• {oferta['titulo']}\n\n"
    mensagem += f"üíé {oferta['descricao']}\n"
    mensagem += f"‚è∞ {oferta['prazo']}\n\n"
    mensagem += "üéÅ BENEF√çCIOS INCLUSOS:\n"
    
    for beneficio in oferta['beneficios']:
        mensagem += f"{beneficio}\n"
    
    mensagem += f"\nüì∏ Como Garantir seu Acesso VIP:\n"
    mensagem += f"‚Ä¢ Fa√ßa seu dep√≥sito pelo link oficial\n"
    mensagem += f"‚Ä¢ Envie o print do dep√≥sito + cupom em at√© 12 horas\n"
    mensagem += f"‚Ä¢ Receba seu link de acesso VIP instantaneamente\n"
    
    keyboard = [
        [InlineKeyboardButton("üéÅ ENVIAR PRINT NO GRUPO", url="https://t.me/seu_grupo_suporte")],
        [InlineKeyboardButton("üí∞ FAZER DEP√ìSITO AGORA", url="https://win-agegate-promo-68.lovable.app/")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await bot.send_message(
            chat_id=user_id,
            text=mensagem,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        logger.info(f"Oferta urgente enviada para usu√°rio {user_id}")
    except Exception as e:
        logger.error(f"Erro ao enviar oferta urgente: {e}")

# ==========================================
# HANDLERS DE COMANDOS
# ==========================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler do comando /start com onboarding estrat√©gico"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    inicializar_usuario(user_id, username)
    usuarios_free.add(user_id)
    
    mensagem_boas_vindas = (
        f"üëã Bem-vindo ao sistema de sinais mais avan√ßado do Brasil!\n\n"
        f"üéØ Voc√™ est√° no grupo FREE com sinais limitados\n"
        f"üí° Para desbloquear o potencial completo, veja as ofertas abaixo:\n\n"
        f"üî• OFERTA ESPECIAL ATIVA:\n"
        f"‚Ä¢ 90 dias VIP GR√ÅTIS no primeiro dep√≥sito\n"
        f"‚Ä¢ B√¥nus de at√© R$600\n"
        f"‚Ä¢ Material trader profissional\n"
        f"‚Ä¢ Gest√£o de banca com juros compostos\n\n"
        f"‚è∞ Vagas limitadas! Garante j√° a sua!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîì ENTRAR NO VIP", url="https://win-agegate-promo-68.lovable.app/")],
        [InlineKeyboardButton("üéÅ CUPOM: GESTAO", callback_data="cupom_gestao")],
        [InlineKeyboardButton("üèÜ VER PR√äMIOS VIP", callback_data="premios_vip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        mensagem_boas_vindas,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def promover_vip_comando(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando admin para promover usu√°rio a VIP"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå Acesso negado!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå Use: /vip <user_id>")
        return
    
    try:
        user_id = int(context.args[0])
        if promover_para_vip(user_id, 90):
            await update.message.reply_text(f"‚úÖ Usu√°rio {user_id} promovido a VIP por 90 dias!")
            estatisticas_bot["conversoes_vip"] += 1
        else:
            await update.message.reply_text(f"‚ùå Erro ao promover usu√°rio {user_id}")
    except ValueError:
        await update.message.reply_text("‚ùå ID de usu√°rio inv√°lido!")

async def status_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra estat√≠sticas detalhadas do bot"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    taxa_conversao = calcular_taxa_conversao()
    
    mensagem_status = (
        f"üìä ESTAT√çSTICAS DO BOT\n\n"
        f"üë• Usu√°rios Free: {len(usuarios_free)}\n"
        f"üëë Usu√°rios VIP: {len(usuarios_vip)}\n"
        f"üìà Taxa de Convers√£o: {taxa_conversao:.1f}%\n"
        f"üì° Sinais Enviados: {estatisticas_bot['sinais_enviados']}\n"
        f"üí∞ Convers√µes VIP: {estatisticas_bot['conversoes_vip']}\n"
        f"üïê √öltima atualiza√ß√£o: {datetime.now().strftime('%H:%M:%S')}"
    )
    
    await update.message.reply_text(mensagem_status)

# ==========================================
# HANDLERS DE CALLBACK (BOT√ïES)
# ==========================================
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para bot√µes inline"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "cupom_gestao":
        cupom_info = ofertas_promocionais["codigo_promocional"]
        mensagem = (
            f"üéÅ CUPOM DE DESCONTO EXCLUSIVO\n\n"
            f"üìã C√≥digo: {cupom_info['codigo']}\n\n"
            f"‚ú® Benef√≠cios:\n"
        )
        for beneficio in cupom_info['beneficios']:
            mensagem += f"{beneficio}\n"
        
        mensagem += f"\n{cupom_info['instrucoes']}"
        
        keyboard = [
            [InlineKeyboardButton("üìã COPIAR C√ìDIGO", callback_data="copiar_codigo")],
            [InlineKeyboardButton("üéØ USAR CUPOM E CADASTRAR", url="https://win-agegate-promo-68.lovable.app/")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(mensagem, reply_markup=reply_markup)
    
    elif data == "torneio_vip" or data == "premios_vip":
        torneio = ofertas_promocionais["torneio_vip"]
        mensagem = f"üèÜ {torneio['titulo']}\n\n"
        mensagem += "üéÅ Pr√™mios Incr√≠veis:\n"
        
        for premio in torneio['premios']:
            mensagem += f"{premio}\n"
        
        mensagem += f"\n{torneio['call_to_action']}"
        
        keyboard = [
            [InlineKeyboardButton("üíé ENTRAR NO CLUBE PRIVADO VIP", url="https://win-agegate-promo-68.lovable.app/")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(mensagem, reply_markup=reply_markup)

# ==========================================
# SISTEMA DE AUTOMA√á√ÉO E AGENDAMENTO
# ==========================================
async def autosinal_estrategico(context: ContextTypes.DEFAULT_TYPE):
    """Sistema de sinais autom√°ticos com estrat√©gia de convers√£o"""
    # Envia sinal free limitado
    await enviar_sinal_free_limitado(context)
    
    # Envia ofertas urgentes para usu√°rios free selecionados
    usuarios_free_lista = list(usuarios_free)
    if usuarios_free_lista:
        # Seleciona at√© 3 usu√°rios aleat√≥rios para receber oferta urgente
        usuarios_selecionados = random.sample(
            usuarios_free_lista, 
            min(3, len(usuarios_free_lista))
        )
        
        bot = context.bot
        for user_id in usuarios_selecionados:
            await enviar_oferta_urgente(bot, user_id)
            await asyncio.sleep(2)  # Evita spam

async def autosinal_vip(context: ContextTypes.DEFAULT_TYPE):
    """Sinais autom√°ticos exclusivos para VIP"""
    if usuarios_vip:
        await enviar_sinal_vip_exclusivo(context)

async def verificar_vips_expirados(context: ContextTypes.DEFAULT_TYPE):
    """Verifica e remove VIPs expirados"""
    usuarios_para_verificar = list(usuarios_vip)
    for user_id in usuarios_para_verificar:
        if verificar_vip_expirado(user_id):
            logger.info(f"VIP expirado removido: {user_id}")

# ==========================================
# CONFIGURA√á√ÉO DO AGENDADOR
# ==========================================
scheduler = AsyncIOScheduler()

# Sinais free estrat√©gicos a cada 25 minutos
scheduler.add_job(
    autosinal_estrategico,
    trigger=IntervalTrigger(minutes=25),
    id="autosinal_free",
    replace_existing=True
)

# Sinais VIP exclusivos a cada 15 minutos
scheduler.add_job(
    autosinal_vip,
    trigger=IntervalTrigger(minutes=15),
    id="autosinal_vip", 
    replace_existing=True
)

# Verifica√ß√£o de VIPs expirados a cada hora
scheduler.add_job(
    verificar_vips_expirados,
    trigger=IntervalTrigger(hours=1),
    id="verificar_vips",
    replace_existing=True
)

# ==========================================
# INICIALIZA√á√ÉO E EXECU√á√ÉO PRINCIPAL
# ==========================================
async def main():
    """Fun√ß√£o principal do bot"""
    logger.info("üöÄ Iniciando Bot de Sinais Estrat√©gico...")
    
    # Criar aplica√ß√£o do bot
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # Registrar handlers de comandos
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("vip", promover_vip_comando))
    app.add_handler(CommandHandler("status", status_bot))
    
    # Registrar handler de callbacks
    app.add_handler(CallbackQueryHandler(callback_handler))
    
    # Iniciar agendador
    scheduler.start()
    logger.info("üìÖ Agendador de tarefas iniciado")
    
    # Iniciar bot
    await app.start()
    logger.info("ü§ñ Bot iniciado com sucesso!")
    logger.info(f"üìä Configura√ß√µes: FREE={len(usuarios_free)} | VIP={len(usuarios_vip)}")
    
    # Iniciar polling
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Bot interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico: {e}")
    finally:
        logger.info("üîö Bot finalizado")


