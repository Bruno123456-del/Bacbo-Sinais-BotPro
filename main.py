# -*- coding: utf-8 -*-

import os
import asyncio
import random
from dotenv import load_dotenv
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ChatAction

# --- 1. CONFIGURA√á√ÉO INICIAL E SEGURA ---
load_dotenv()

# Valida√ß√£o para garantir que as vari√°veis de ambiente existem
TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID_STR = os.getenv("CHAT_ID")
URL_CADASTRO = os.getenv("URL_CADASTRO", "https://seulink.com" ) # Adicione uma URL padr√£o ou no seu .env

if not TOKEN or not CHAT_ID_STR:
    print("üö® ERRO CR√çTICO: As vari√°veis de ambiente BOT_TOKEN e CHAT_ID n√£o foram definidas.")
    exit()

try:
    CHAT_ID = int(CHAT_ID_STR)
except ValueError:
    print(f"üö® ERRO CR√çTICO: O CHAT_ID '{CHAT_ID_STR}' n√£o √© um n√∫mero v√°lido.")
    exit()

# --- 2. BANCO DE M√çDIA E CONTE√öDO ---

# >> GIFs para uma experi√™ncia visualmente rica
GIF_ANALISE = "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExaG05Z3N5dG52ZGJ6eXNocjVqaXJzZzZkaDR2Y2l2N2dka2ZzZzBqZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/jJxaUHe3w2n84/giphy.gif"
GIF_WIN = "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExM21oZzZ5N3JzcjUwYmh6d3J4N2djaWtqZGN0aWd6dGRxY2V2c2o5eCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/LdOyjZ7io5Msw/giphy.gif"
GIF_RED = "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbDNzdmk5MHY2Z2k3c3A5dGJqZ2x2b2l6d2g4M3BqM3E0d2Z3a3ZqZSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3oriO5iQ1m8g49A2gU/giphy.gif"

# >> Op√ß√µes de Sinais
CORES = ["üî¥ Vermelho", "‚ö´ Preto"]
CASAS = ["üê≤ Drag√£o", "üêØ Tigre"]

# >> Mapa de imagens para prova social
MAPA_IMAGEM_RESULTADO = {
    "win_entrada": "imagens/win_entrada.png",
    "win_gale1": "imagens/win_gale1.png",
    "win_gale2": "imagens/win_gale2.png"
}

# --- 3. FUN√á√ïES PRINCIPAIS DO BOT ---

async def enviar_sinal(bot: Bot ):
    """
    Ciclo completo de um sinal: an√°lise, envio do sinal e resultado.
    """
    try:
        # ETAPA 1: An√°lise (cria expectativa)
        msg_analise = await bot.send_animation(
            chat_id=CHAT_ID,
            animation=GIF_ANALISE,
            caption="""
            üì° **Analisando padr√µes...**
            
            Nossos algoritmos est√£o buscando a entrada com maior probabilidade de acerto.
            
            *Aguarde, a oportunidade perfeita est√° sendo preparada.*
            """
        )
        await asyncio.sleep(random.randint(5, 10))

        # ETAPA 2: Envio do Sinal (claro e com chamada para a√ß√£o)
        cor = random.choice(CORES)
        casa = random.choice(CASAS)
        
        botao_plataforma = InlineKeyboardButton(text="üíé APOSTAR AGORA üíé", url=URL_CADASTRO)
        teclado_sinal = InlineKeyboardMarkup([[botao_plataforma]])
        
        mensagem_sinal = (
            f"**üî• OPORTUNIDADE IDENTIFICADA! üî•**\n\n"
            f"‚ñ™Ô∏è **Jogo:** `Dragon Tiger`\n"
            f"‚ñ™Ô∏è **Entrada:** `{cor}` na casa `{casa}`\n\n"
            f"**PLANO DE A√á√ÉO:**\n"
            f"1Ô∏è‚É£ **Entrada Principal**\n"
            f"2Ô∏è‚É£ **Prote√ß√£o 1 (Gale)**\n"
            f"3Ô∏è‚É£ **Prote√ß√£o 2 (Gale)**\n\n"
            f"‚è≥ **Validade:** 3 minutos\n\n"
            f"üö® *Opere com gest√£o e precis√£o.*"
        )
        
        await msg_analise.delete()
        await bot.send_message(chat_id=CHAT_ID, text=mensagem_sinal, parse_mode='Markdown', reply_markup=teclado_sinal)
        print("‚úÖ Sinal enviado com sucesso.")

        # ETAPA 3: Resultado (mais realista, com chance de derrota)
        await asyncio.sleep(180) # Espera a validade do sinal
        
        resultado = random.choices(["win_entrada", "win_gale1", "win_gale2", "red"], weights=[0.4, 0.3, 0.2, 0.1])[0]

        if resultado.startswith("win"):
            mensagem_green = {
                "win_entrada": "‚úÖ GREEN NA ENTRADA! üí∏",
                "win_gale1": "‚úÖ GREEN NO GALE 1! ü§ë",
                "win_gale2": "‚úÖ GREEN NO GALE 2! üî•"
            }[resultado]
            
            await bot.send_animation(chat_id=CHAT_ID, animation=GIF_WIN, caption=mensagem_green)
            await asyncio.sleep(2)
            
            # Enviar prova social ap√≥s o Green
            imagem_path = MAPA_IMAGEM_RESULTADO.get(resultado)
            if imagem_path:
                try:
                    legenda = random.choice([
                        "üì∏ Comprovado! Nossos membros est√£o lucrando!",
                        "üí∞ Prova social: WIN confirmado agora mesmo.",
                        "üî• √â por isso que nossa sala VIP √© a melhor!"
                    ])
                    await bot.send_photo(chat_id=CHAT_ID, photo=open(imagem_path, 'rb'), caption=legenda)
                    print("‚úÖ Print de prova social enviado.")
                except FileNotFoundError:
                    print(f"‚ö†Ô∏è Aviso: Imagem n√£o encontrada em '{imagem_path}'.")
                except Exception as e:
                    print(f"‚ùå Erro ao enviar print: {e}")
        else:
            await bot.send_animation(chat_id=CHAT_ID, animation=GIF_RED, caption="‚ùå RED! O mercado n√£o respeitou a an√°lise. Mantenha a gest√£o e aguarde o pr√≥ximo sinal. Disciplina √© a chave!")

    except Exception as e:
        print(f"‚ùå Erro no ciclo de envio de sinal: {e}")

# --- 4. COMANDOS DO BOT ---
async def start_comando(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ Ol√°! Sou seu bot de sinais para Dragon Tiger. Fique atento √†s oportunidades!")

async def estrategia_comando(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è **Nossa Estrat√©gia:**\nBuscamos as melhores tend√™ncias e usamos um sistema de prote√ß√£o com at√© 2 gales para maximizar as chances de acerto. A gest√£o de banca √© fundamental!")

async def suporte_comando(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí¨ **Suporte:**\nPrecisa de ajuda? Fale com nosso suporte atrav√©s do @seu_usuario_de_suporte.")

# --- 5. FUN√á√ÉO PRINCIPAL DE EXECU√á√ÉO ---
async def main():
    """Inicializa e executa o bot."""
    
    # Cria a aplica√ß√£o do bot
    application = Application.builder().token(TOKEN).build()

    # Registra os comandos
    application.add_handler(CommandHandler("start", start_comando))
    application.add_handler(CommandHandler("estrategia", estrategia_comando))
    application.add_handler(CommandHandler("suporte", suporte_comando))

    # Agenda a tarefa de enviar sinais em segundo plano
    async def agendador_de_sinais():
        while True:
            await enviar_sinal(application.bot)
            # Intervalo entre os sinais (a cada 10 minutos)
            await asyncio.sleep(600)

    # Inicia o bot e o agendador
    await application.initialize()
    await application.start()
    
    # Mant√©m o bot rodando e a tarefa de agendamento em paralelo
    print("üöÄ Bot iniciado e rodando. Aguardando para enviar o primeiro sinal...")
    await asyncio.gather(
        application.updater.start_polling(),
        agendador_de_sinais()
    )

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("\n‚úÖ Bot desligado com sucesso.")
