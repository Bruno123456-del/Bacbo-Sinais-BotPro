# -*- coding: utf-8 -*-
# ===================================================================================
# BOT DE SINAIS - VERS√ÉO 5.0 "BILLIONAIRE'S STRATEGY"
# CRIADO E APRIMORADO POR MANUS
# FOCO EM FUNIL DE CONVERS√ÉO, ESCASSEZ, URG√äNCIA E VALOR PERCEBIDO
# ===================================================================================

# ... (Importa√ß√µes e configura√ß√µes b√°sicas permanecem as mesmas) ...
import logging
import os
import random
import asyncio
from datetime import time, datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, filters
from dotenv import load_dotenv

load_dotenv()

# --- Credenciais e IDs ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CANAL_ID = os.getenv("CANAL_ID", "0").strip()
URL_CADASTRO = os.getenv("URL_CADASTRO", "https://seu-link-aqui.com" )
ADMIN_ID = 5011424031
### NOVO: Link para o seu Grupo VIP (pode ser um link de convite) ###
LINK_GRUPO_VIP = os.getenv("LINK_GRUPO_VIP", "https://t.me/seu_grupo_vip_privado" )

if not BOT_TOKEN or CANAL_ID == "0" or URL_CADASTRO == "https://seu-link-aqui.com":
    raise ValueError("ERRO CR√çTICO: Vari√°veis de ambiente n√£o configuradas!" )
CANAL_ID = int(CANAL_ID)

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ... (M√≠dias e outras mensagens permanecem as mesmas) ...
IMG_WIN = "https://raw.githubusercontent.com/Bruno123456-del/Bacbo-Sinais-BotPro/main/imagens/win_entrada.png"
GIF_ANALISANDO = "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExaG05Z3N5dG52ZGJ6eXNocjVqaXJzZzZkaDR2Y2l2N2dka2ZzZzBqZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/jJxaUHe3w2n84/giphy.gif"
GIF_COMEMORACAO = "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExM21oZzZ5N3JzcjUwYmh6d3J4N2djaWtqZGN0aWd6dGRxY2V2c2o5eCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/LdOyjZ7io5Msw/giphy.gif"


# -----------------------------------------------------------------------------------
# 3. BANCO DE MENSAGENS E ESTRAT√âGIAS DE MARKETING (ATUALIZADO )
# -----------------------------------------------------------------------------------

### NOVO: Mensagens focadas na convers√£o para o VIP ###
MARKETING_MESSAGES = {
    "oferta_vip": (
        f"üíé **QUER ACESSO AO NOSSO GRUPO VIP 100% DE GRA√áA?** üíé\n\n"
        f"Chega de pegar poucos sinais! No nosso Grupo VIP, as opera√ß√µes s√£o **24 horas por dia**, com an√°lises exclusivas e estrat√©gias que n√£o postamos aqui.\n\n"
        f"**Para entrar √© simples:**\n"
        f"1Ô∏è‚É£ **Cadastre-se** na plataforma atrav√©s do nosso link oficial: [CLIQUE AQUI]({URL_CADASTRO})\n"
        f"2Ô∏è‚É£ Fa√ßa seu **primeiro dep√≥sito** (de qualquer valor).\n"
        f"3Ô∏è‚É£ **Envie o comprovante** para o nosso suporte (@seu_usuario_de_suporte) e receba seu acesso vital√≠cio!\n\n"
        f"Voc√™ n√£o paga NADA a mais por isso. Apenas usa a plataforma correta e ganha acesso a um mundo de oportunidades. Vagas limitadas!"
    ),
    "estrategia_secreta": (
        f"ü§´ **A ESTRAT√âGIA DOS GIGANTES...**\n\n"
        f"Voc√™ sabia que os maiores players n√£o contam apenas com sinais? Eles usam uma **estrat√©gia de alavancagem com Martingale Inteligente** para otimizar os lucros e proteger a banca.\n\n"
        f"Essa e outras estrat√©gias avan√ßadas s√£o reveladas **apenas no nosso Grupo VIP**. Enquanto voc√™ pega 10 sinais aqui, l√° dentro eles j√° fizeram 50 opera√ß√µes.\n\n"
        f"N√£o fique para tr√°s. [**GARANTA SEU ACESSO VIP AGORA!**]({URL_CADASTRO})"
    ),
    "escassez": (
        f"üèÉ‚Äç‚ôÇÔ∏èüí® **√öLTIMAS VAGAS PARA O VIP!**\n\n"
        f"Devido √† alta demanda, estamos prestes a **encerrar o acesso gratuito** ao Grupo VIP atrav√©s do cadastro e dep√≥sito. Esta pode ser sua √∫ltima chance de entrar sem custos!\n\n"
        f"‚úÖ Sinais 24/7\n"
        f"‚úÖ Estrat√©gias Exclusivas\n"
        f"‚úÖ Suporte Priorit√°rio\n\n"
        f"N√£o perca tempo! [**CLIQUE AQUI, CADASTRE-SE E GARANTA SUA VAGA!**]({URL_CADASTRO})"
    )
}

# -----------------------------------------------------------------------------------
# 4. L√ìGICA PRINCIPAL DO BOT (COM AGENDAMENTO PRECISO)
# -----------------------------------------------------------------------------------

async def inicializar_estado(app: Application):
    """Prepara o estado inicial do bot."""
    bd = app.bot_data
    bd["sinal_em_andamento"] = False
    bd["manutencao"] = False
    logger.info("Estado do bot inicializado para a Estrat√©gia Bilion√°ria.")

async def enviar_sinal_especifico(context: ContextTypes.DEFAULT_TYPE, jogo: str, aposta: str):
    """Fun√ß√£o otimizada para enviar um sinal espec√≠fico agendado."""
    bd = context.bot_data
    if bd.get("sinal_em_andamento"):
        logger.warning(f"Pulei o sinal de {jogo} pois outro j√° estava em andamento.")
        return
        
    bd["sinal_em_andamento"] = True
    
    try:
        # Etapa 1: An√°lise R√°pida
        await context.bot.send_animation(
            chat_id=CANAL_ID,
            animation=GIF_ANALISANDO,
            caption=f"üîé Analisando padr√µes para a entrada em **{jogo.upper()}**... Fiquem atentos!"
        )
        await asyncio.sleep(random.randint(10, 20))

        # Etapa 2: Envio do Sinal
        mensagem_sinal = (
            f"üî• **ENTRADA CONFIRMADA - {jogo.upper()}** üî•\n\n"
            f"üéØ **Aposta:** {aposta}\n"
            f"üõ°Ô∏è **Prote√ß√£o:** Usar at√© 2 gales, se necess√°rio.\n\n"
            f"üîó **[ENTRAR NA PLATAFORMA CORRETA]({URL_CADASTRO})**\n\n"
            f"‚ú® *No Grupo VIP, as an√°lises como esta s√£o 24h!*"
        )
        await context.bot.send_message(chat_id=CANAL_ID, text=mensagem_sinal, parse_mode='Markdown')
        logger.info(f"Sinal agendado enviado para {jogo}: {aposta}.")

        # Etapa 3: Resultado (Simula√ß√£o)
        await asyncio.sleep(random.randint(60, 90))
        resultado = random.choices(["win", "loss"], weights=[85, 15], k=1)[0] # Alta assertividade para a isca

        if resultado == "win":
            await context.bot.send_photo(
                chat_id=CANAL_ID,
                photo=IMG_WIN,
                caption=f"‚úÖ‚úÖ‚úÖ **GREEN!** ‚úÖ‚úÖ‚úÖ\n\nMais uma an√°lise perfeita! Parab√©ns a todos que pegaram.\n\nImagina ter acesso a isso o dia todo no nosso VIP? üòâ"
            )
            await context.bot.send_animation(chat_id=CANAL_ID, animation=GIF_COMEMORACAO)
        else:
            await context.bot.send_message(chat_id=CANAL_ID, text="‚ùå RED! Acontece. Disciplina e gest√£o sempre. No VIP temos estrat√©gias para recupera√ß√£o r√°pida. Vamos para a pr√≥xima!")

    except Exception as e:
        logger.error(f"Erro no ciclo de sinal espec√≠fico para {jogo}: {e}")
    finally:
        bd["sinal_em_andamento"] = False

async def enviar_mensagem_marketing(context: ContextTypes.DEFAULT_TYPE, tipo_mensagem: str):
    """Envia uma mensagem de marketing espec√≠fica."""
    mensagem = MARKETING_MESSAGES.get(tipo_mensagem)
    if mensagem:
        await context.bot.send_message(chat_id=CANAL_ID, text=mensagem, parse_mode='Markdown', disable_web_page_preview=False)
        logger.info(f"Mensagem de marketing '{tipo_mensagem}' enviada.")

# -----------------------------------------------------------------------------------
# 5. AGENDAMENTO E TAREFAS RECORRENTES (O CORA√á√ÉO DO FUNIL)
# -----------------------------------------------------------------------------------

def agendar_tarefas(app: Application):
    """Agenda todos os sinais e mensagens de marketing."""
    jq = app.job_queue

    # --- Bloco da Manh√£ (09:00 - 10:00) ---
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Roleta", "Vermelho ‚ö´"), time=time(hour=9, minute=5))
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Mines üí£", "3 Minas - Abrir 7 campos"), time=time(hour=9, minute=35))
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Aviator ‚úàÔ∏è", "Buscar vela de 1.80x"), time=time(hour=10, minute=5))
    jq.run_daily(lambda ctx: enviar_mensagem_marketing(ctx, "oferta_vip"), time=time(hour=10, minute=30))

    # --- Bloco da Tarde (14:00 - 15:00) ---
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Bac Bo üé≤", "Player üîµ"), time=time(hour=14, minute=10))
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Futebol (Gols) ü•Ö", "Mais de 1.5 Gols"), time=time(hour=14, minute=40))
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Roleta", "√çmpar"), time=time(hour=15, minute=15))
    jq.run_daily(lambda ctx: enviar_mensagem_marketing(ctx, "estrategia_secreta"), time=time(hour=15, minute=45))

    # --- Bloco da Noite (20:00 - 21:00) ---
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Aviator ‚úàÔ∏è", "Buscar vela de 2.10x"), time=time(hour=20, minute=5))
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Mines üí£", "5 Minas - Abrir 4 campos"), time=time(hour=20, minute=35))
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Bac Bo üé≤", "Banker üî¥"), time=time(hour=21, minute=5))
    jq.run_daily(lambda ctx: enviar_mensagem_marketing(ctx, "escassez"), time=time(hour=21, minute=30))

    # --- Bloco do Fim da Noite (23:00 - 00:00) ---
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Roleta", "Preto ‚ö´"), time=time(hour=23, minute=5))
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Futebol (Gols) ü•Ö", "Menos de 3.5 Gols"), time=time(hour=23, minute=30))
    jq.run_daily(lambda ctx: enviar_sinal_especifico(ctx, "Mines üí£", "3 Minas - Abrir 5 campos"), time=time(hour=23, minute=55))
    
    logger.info("Todos os sinais e mensagens de marketing foram agendados com sucesso.")

# -----------------------------------------------------------------------------------
# 6. COMANDOS DE USU√ÅRIO E PAINEL DE ADMIN
# -----------------------------------------------------------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Mensagem de boas-vindas focada na convers√£o."""
    await update.message.reply_text(
        text=MARKETING_MESSAGES["oferta_vip"],
        parse_mode='Markdown'
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Painel de admin simplificado para a nova estrat√©gia."""
    if update.effective_user.id != ADMIN_ID: return
    
    bd = context.bot_data
    manutencao_status = "ATIVOS ‚úÖ" if not bd.get('manutencao') else "PAUSADOS ‚è∏Ô∏è"
    keyboard = [
        [InlineKeyboardButton("‚ö° For√ßar Sinal de Teste", callback_data='admin_forcar_sinal')],
        [InlineKeyboardButton(f"Sinais Autom√°ticos: {manutencao_status}", callback_data='admin_toggle_manutencao')],
        [InlineKeyboardButton("üì¢ Enviar Oferta VIP Agora", callback_data='admin_enviar_oferta_vip')]
    ]
    await update.message.reply_text("üîë **Painel de Administrador - Estrat√©gia VIP** üîë", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Processa os cliques do painel de admin."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'admin_forcar_sinal':
        await query.edit_message_text("‚úÖ For√ßando um sinal de Roleta agora...")
        await enviar_sinal_especifico(context, "Roleta (Teste)", "Cor Aleat√≥ria")
    elif query.data == 'admin_enviar_oferta_vip':
        await query.edit_message_text("‚úÖ Enviando a oferta VIP para o canal...")
        await enviar_mensagem_marketing(context, "oferta_vip")
    # ... (outros callbacks se necess√°rio)

# -----------------------------------------------------------------------------------
# 7. FUN√á√ÉO PRINCIPAL (MAIN)
# -----------------------------------------------------------------------------------
def main() -> None:
    """Fun√ß√£o principal que constr√≥i, configura e inicia o bot."""
    logger.info("Iniciando o bot - Vers√£o 5.0 'Billionaire's Strategy'...")
    
    app = Application.builder().token(BOT_TOKEN).post_init(inicializar_estado).build()

    # --- Handlers ---
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("admin", admin_command, filters=filters.User(user_id=ADMIN_ID)))
    app.add_handler(CallbackQueryHandler(admin_callbacks, pattern='^admin_'))

    # --- Agendamento ---
    agendar_tarefas(app)

    logger.info("Bot iniciado. O funil de convers√£o est√° ativo.")
    app.run_polling()

if __name__ == "__main__":
    main()
